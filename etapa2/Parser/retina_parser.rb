#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "retina_lexer"
require_relative "retina_ast"

class SyntacticError < RuntimeError

    def initialize(tok)
        @token = tok
    end

    def to_s
        "Syntactic error on: #{@token}"
    end
end

class Parser < Racc::Parser

module_eval(<<'...end retina_parser.y/module_eval...', 'retina_parser.y', 157)

def on_error(id, token, stack)
    raise SyntacticError::new(token)
end

def next_token
    token = @lexer.catch_lexeme
    return [false,false] unless token
    return [token.class,token]
end

def parse(lexer)
    @yydebug = true
    @lexer = lexer
    @tokens = []
    ast = do_parse
    return ast
end
...end retina_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,     8,    20,    13,    14,    20,     9,    22,    20,    22,
    20,    21,    22,    21,    23,    22,    21,    22,    20,    21,
    20,    21,    25,    20,    26,    22,    20,    22,    20,    21,
    22,    21,    41,    22,    21,    22,    27,    21,    28,    21,
    33,    34,    37,    36,    35,    13,    14,    18,    19,    18,
    19,    41,    18,    19,    29,    18,    19,    18,    19,    33,
    34,    37,    36,    35,    30,    18,    19,    18,    19,    31,
    18,    19,    20,    18,    19,    18,    19,    20,    41,    22,
    20,    41,    20,    21,    22,    20,    41,    22,    21,    22,
    20,    21,    22,    21,    41,    20,    21,    22,    20,    41,
    20,    21,    22,    20,    41,    22,    21,    22,    41,    21,
    22,    21,   nil,   nil,    21,   nil,   nil,   nil,   nil,    18,
    19,     4,   nil,     5,    18,    19,     7,    18,    19,    18,
    19,   nil,    18,    19,   nil,   nil,     6,    18,    19,     4,
   nil,     5,    18,    19,     7,    18,    19,    18,    19,   nil,
    18,    19,   nil,     3,     6,     4,   nil,     5,   nil,     4,
     7,     5,   nil,     4,     7,     5,   nil,   nil,     7,   nil,
     6,     3,   nil,   nil,     6,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,     3,   nil,   nil,   nil,     3,    40,    41,    43,    42,
    45,    44,   nil,    38,    39,    33,    34,    37,    36,    35,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    46,   nil,   nil,
    40,    41,    43,    42,    45,    44,    32,    38,    39,    33,
    34,    37,    36,    35,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    46,    40,    41,    43,    42,    45,    44,   nil,    38,
    39,    33,    34,    37,    36,    35,   nil,   nil,    69,   nil,
   nil,   nil,    47,    46,    40,    41,    43,    42,    45,    44,
   nil,    38,    39,    33,    34,    37,    36,    35,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    46,    40,    41,    43,    42,
    45,    44,   nil,    38,    39,    33,    34,    37,    36,    35,
    40,    41,    43,    42,    45,    44,   nil,    38,    39,    33,
    34,    37,    36,    35,    41,    43,    42,    45,    44,   nil,
    38,    39,    33,    34,    37,    36,    35,    41,   -33,   -33,
   -33,   -33,   nil,    38,    39,    33,    34,    37,    36,    35,
    41,   -33,   -33,   -33,   -33,   nil,    38,    39,    33,    34,
    37,    36,    35,    41,   -33,   -33,   -33,   -33,   nil,    38,
    39,    33,    34,    37,    36,    35,    41,   -33,   -33,   -33,
   -33,   nil,    38,    39,    33,    34,    37,    36,    35 ]

racc_action_check = [
     7,     1,     9,     5,     5,    20,     3,     7,    21,     9,
    22,     7,    20,     9,     8,    21,    20,    22,    33,    21,
    34,    22,    10,    35,    11,    33,    36,    34,    37,    33,
    35,    34,    59,    36,    35,    37,    12,    36,    13,    37,
    59,    59,    59,    59,    59,    30,    30,     7,     7,     9,
     9,    60,    20,    20,    14,    21,    21,    22,    22,    60,
    60,    60,    60,    60,    15,    33,    33,    34,    34,    16,
    35,    35,    38,    36,    36,    37,    37,    39,    48,    38,
    40,    49,    41,    38,    39,    42,    54,    40,    39,    41,
    43,    40,    42,    41,    55,    44,    42,    43,    45,    56,
    46,    43,    44,    47,    57,    45,    44,    46,    58,    45,
    47,    46,   nil,   nil,    47,   nil,   nil,   nil,   nil,    38,
    38,     0,   nil,     0,    39,    39,     0,    40,    40,    41,
    41,   nil,    42,    42,   nil,   nil,     0,    43,    43,     4,
   nil,     4,    44,    44,     4,    45,    45,    46,    46,   nil,
    47,    47,   nil,     0,     4,     6,   nil,     6,   nil,    26,
     6,    26,   nil,    32,    26,    32,   nil,   nil,    32,   nil,
     6,     4,   nil,   nil,    26,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    32,    17,    17,    17,    17,
    17,    17,   nil,    17,    17,    17,    17,    17,    17,    17,
   nil,   nil,   nil,   nil,   nil,   nil,    17,    17,   nil,   nil,
    24,    24,    24,    24,    24,    24,    17,    24,    24,    24,
    24,    24,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,
    24,    24,    50,    50,    50,    50,    50,    50,   nil,    50,
    50,    50,    50,    50,    50,    50,   nil,   nil,    50,   nil,
   nil,   nil,    50,    50,    62,    62,    62,    62,    62,    62,
   nil,    62,    62,    62,    62,    62,    62,    62,   nil,   nil,
   nil,   nil,   nil,   nil,    62,    62,    67,    67,    67,    67,
    67,    67,   nil,    67,    67,    67,    67,    67,    67,    67,
    68,    68,    68,    68,    68,    68,   nil,    68,    68,    68,
    68,    68,    68,    68,    61,    61,    61,    61,    61,   nil,
    61,    61,    61,    61,    61,    61,    61,    63,    63,    63,
    63,    63,   nil,    63,    63,    63,    63,    63,    63,    63,
    64,    64,    64,    64,    64,   nil,    64,    64,    64,    64,
    64,    64,    64,    65,    65,    65,    65,    65,   nil,    65,
    65,    65,    65,    65,    65,    65,    66,    66,    66,    66,
    66,   nil,    66,    66,    66,    66,    66,    66,    66 ]

racc_action_pointer = [
    95,     1,   nil,   -10,   113,   -40,   129,   -10,    14,    -8,
    -5,     5,     7,   -20,    -4,    45,    42,   194,   nil,   nil,
    -5,    -2,     0,   nil,   218,   nil,   133,   nil,   nil,   nil,
     2,   nil,   137,     8,    10,    13,    16,    18,    62,    67,
    70,    72,    75,    80,    85,    88,    90,    93,    75,    78,
   240,   nil,   nil,   nil,    83,    91,    96,   101,   105,    29,
    48,   311,   262,   324,   337,   350,   363,   284,   298,   nil ]

racc_action_default = [
   -33,   -33,    -1,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
   -33,   -11,   -33,   -33,   -33,   -33,   -33,   -33,   -13,   -14,
   -33,   -33,   -33,    70,    -2,    -3,   -33,    -4,    -7,    -8,
   -33,    -5,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -15,   -16,
   -33,   -12,   -10,    -6,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32 ]

racc_goto_table = [
    17,     1,    24,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,    49,    50,    10,     2,    16,   nil,
    15,   nil,   nil,   nil,   nil,   nil,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,   nil,   nil,    51,    53,    52 ]

racc_goto_check = [
     3,     1,     3,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,     3,     3,     4,     2,     4,   nil,
     6,   nil,   nil,   nil,   nil,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,   nil,   nil,     2,     4,     6 ]

racc_goto_pointer = [
   nil,     1,    17,    -7,    12,    -2,    15 ]

racc_goto_default = [
   nil,   nil,    11,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 61, :_reduce_none,
  3, 62, :_reduce_2,
  3, 62, :_reduce_3,
  3, 62, :_reduce_4,
  3, 62, :_reduce_5,
  4, 62, :_reduce_6,
  2, 66, :_reduce_7,
  2, 66, :_reduce_8,
  1, 65, :_reduce_9,
  3, 65, :_reduce_10,
  1, 64, :_reduce_11,
  3, 64, :_reduce_12,
  1, 63, :_reduce_13,
  1, 63, :_reduce_14,
  2, 63, :_reduce_15,
  2, 63, :_reduce_16,
  3, 63, :_reduce_17,
  3, 63, :_reduce_18,
  3, 63, :_reduce_19,
  3, 63, :_reduce_20,
  3, 63, :_reduce_21,
  3, 63, :_reduce_22,
  3, 63, :_reduce_23,
  3, 63, :_reduce_24,
  3, 63, :_reduce_25,
  3, 63, :_reduce_26,
  3, 63, :_reduce_27,
  3, 63, :_reduce_28,
  3, 63, :_reduce_29,
  3, 63, :_reduce_30,
  3, 63, :_reduce_31,
  3, 63, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 70

racc_token_table = {
  false => 0,
  :error => 1,
  Equal => 2,
  NotEqual => 3,
  GreaterOrEqualTo => 4,
  LessOrEqualTo => 5,
  GreaterThan => 6,
  LessThan => 7,
  ReturnType => 8,
  Plus => 9,
  Minus => 10,
  Asterisk => 11,
  Slash => 12,
  Percent => 13,
  Mod => 14,
  Div => 15,
  Assignment => 16,
  OpenRoundBracket => 17,
  CloseRoundBracket => 18,
  Semicolon => 19,
  Comma => 20,
  Not => 21,
  And => 22,
  Or => 23,
  True => 24,
  False => 25,
  Program => 26,
  End => 27,
  With => 28,
  Do => 29,
  While => 30,
  If => 31,
  Then => 32,
  Else => 33,
  For => 34,
  From => 35,
  By => 36,
  To => 37,
  Repeat => 38,
  Times => 39,
  Function => 40,
  Begin => 41,
  Return => 42,
  Boolean => 43,
  Number => 44,
  OpenEye => 45,
  CloseEye => 46,
  Backward => 47,
  Forward => 48,
  RotateL => 49,
  RotateR => 50,
  SetPosition => 51,
  Arc => 52,
  Read => 53,
  Write => 54,
  WriteLine => 55,
  :UMINUS => 56,
  NumberLiteral => 57,
  VariableIdentifier => 58,
  StringLiteral => 59 }

racc_nt_base = 60

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"==\"",
  "\"!=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "\"->\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"mod\"",
  "\"div\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\",\"",
  "\"not\"",
  "\"and\"",
  "\"or\"",
  "\"true\"",
  "\"false\"",
  "\"program\"",
  "\"end\"",
  "\"with\"",
  "\"do\"",
  "\"while\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\"for\"",
  "\"from\"",
  "\"by\"",
  "\"to\"",
  "\"repeat\"",
  "\"times\"",
  "\"function\"",
  "\"begin\"",
  "\"return\"",
  "\"boolean\"",
  "\"number\"",
  "\"openeye\"",
  "\"closeeye\"",
  "\"backward\"",
  "\"forward\"",
  "\"rotatel\"",
  "\"rotater\"",
  "\"setposition\"",
  "\"arc\"",
  "\"read\"",
  "\"write\"",
  "\"writeline\"",
  "UMINUS",
  "\"num\"",
  "\"id\"",
  "\"str\"",
  "$start",
  "Retina",
  "Instruction",
  "Expression",
  "Instructions",
  "Statements",
  "Statement" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'retina_parser.y', 102)
  def _reduce_2(val, _values, result)
     result = AssignmentInst.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 103)
  def _reduce_3(val, _values, result)
     result = ProgramBlock.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 104)
  def _reduce_4(val, _values, result)
     result = WithBlock.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 105)
  def _reduce_5(val, _values, result)
     result = BeginBlock.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 106)
  def _reduce_6(val, _values, result)
     result = IfBlock.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 108)
  def _reduce_7(val, _values, result)
     result = Declare.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 109)
  def _reduce_8(val, _values, result)
     result = Declare.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 111)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 112)
  def _reduce_10(val, _values, result)
     result = val[0] + [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 114)
  def _reduce_11(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 115)
  def _reduce_12(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 117)
  def _reduce_13(val, _values, result)
     result = NumberType.new(val[0])             
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 118)
  def _reduce_14(val, _values, result)
     result = Identifier.new(val[0])             
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 119)
  def _reduce_15(val, _values, result)
     result = UnaryMinus.new(val[1])             
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 120)
  def _reduce_16(val, _values, result)
     result = Negation.new(val[1])               
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 121)
  def _reduce_17(val, _values, result)
     result = Multiplication.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 122)
  def _reduce_18(val, _values, result)
     result = Division.new(val[0], val[2])       
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 123)
  def _reduce_19(val, _values, result)
     result = IntDivision.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 124)
  def _reduce_20(val, _values, result)
     result = Modulus.new(val[0], val[2])        
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 125)
  def _reduce_21(val, _values, result)
     result = ExactylModulus.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 126)
  def _reduce_22(val, _values, result)
     result = Addition.new(val[0], val[2])       
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 127)
  def _reduce_23(val, _values, result)
     result = Subtraction.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 128)
  def _reduce_24(val, _values, result)
     result = Equivalent.new(val[0], val[2])     
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 129)
  def _reduce_25(val, _values, result)
     result = Diferent.new(val[0], val[2])       
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 130)
  def _reduce_26(val, _values, result)
     result = LessOrEqual.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 131)
  def _reduce_27(val, _values, result)
     result = GreaterOrEqual.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 132)
  def _reduce_28(val, _values, result)
     result = Less.new(val[0], val[2])           
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 133)
  def _reduce_29(val, _values, result)
     result = Greater.new(val[0], val[2])        
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 134)
  def _reduce_30(val, _values, result)
     result = Disyunction.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 135)
  def _reduce_31(val, _values, result)
     result = Conjunction.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'retina_parser.y', 136)
  def _reduce_32(val, _values, result)
     result = val[1]                             
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
